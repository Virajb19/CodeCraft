generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OauthProvider {
  GOOGLE
  GITHUB
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())
  ProfilePicture String? @default("")

  OauthProvider OauthProvider?
  OauthId String?

  snippets Snippet[]
  codeExecutions CodeExecution[]
  stars Star[]

  isPro Boolean @default(false)

  ownedRooms Room[] @relation("RoomOwner")
  participatingRooms Room[] @relation("RoomParticipants")

  comments Comment[]

  // userRooms UserToRoom[]
}

model Room {
  id String @id @default(cuid())
  
  title String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId Int
  owner User @relation("RoomOwner",fields: [ownerId], references: [id])

  participants User[] @relation("RoomParticipants")

  // userRooms UserToRoom[]
}

// model UserToRoom {
//    connectedAt DateTime @default(now())

//    userId Int
//    user  User @relation(fields: [userId], references: [id])

//    roomId String
//    room Room @relation(fields: [roomId], references: [id])

//    @@id([roomId, userId])
// }

model Snippet {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  title String
  language String
  code String

  userId Int
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)

  stars Star[]
  comments Comment[]
}

model CodeExecution {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  language String
  code String
  output String?
  error String?

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Star {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())


  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  snippetId  String
  snippet    Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId,snippetId])
}

model Comment {
   id String @id @default(cuid())
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   content String 

   userId Int
   author User @relation(fields: [userId], references: [id])

   snippetId String
   snippet Snippet @relation(fields: [snippetId], references: [id])
   
}



